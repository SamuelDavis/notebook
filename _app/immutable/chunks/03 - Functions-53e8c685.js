import{S as ta,i as ea,s as na,k as l,q as r,a as i,l as p,m as o,r as f,h as t,c as u,n as T,b as n,E as a,B as je}from"./index-a01aa152.js";function aa(Un){let c,Rt,xs,x,dt,Cs,C,$t,Ss,m,Es,It,Dt,ys,Mt,Fs,S,qt,As,k,jt,_s,Ut,Bt,Os,F,Nt,Rs,v,bs,Kt,Qt,ws,Vt,ds,A,Wt,$s,O,Yt,Is,R,zt,Ds,d,Gt,Ms,$,Jt,qs,I,Xt,js,D,Zt,Us,M,gt,Bs,q,se,Ns,j,te,Ks,_,Bn='<code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">fileExists</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></code>',Qs,U,ee,Vs,b,Nn='<code class="language-ts"><span class="token keyword">function</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token builtin">string</span> $path<span class="token punctuation">)</span><span class="token operator">:</span> File<span class="token punctuation">;</span></code>',Ws,B,ne,Ys,w,Kn='<code class="language-ts"><span class="token keyword">function</span> <span class="token function">saveFailed</span><span class="token punctuation">(</span>stdClass $record<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></code>',zs,N,ae,Gs,K,le,Js,Q,pe,Xs,V,oe,Zs,W,ie,gs,Y,ue,st,z,re,tt,G,fe,et,H,Qn=`<code class="language-php"><span class="token comment">// worse</span>
<span class="token keyword">function</span> <span class="token function-definition function">makeCircle</span><span class="token punctuation">(</span><span class="token keyword type-hint">float</span> <span class="token variable">$x</span><span class="token punctuation">,</span> <span class="token keyword type-hint">float</span> <span class="token variable">$y</span><span class="token punctuation">,</span> <span class="token keyword type-hint">float</span> <span class="token variable">$radius</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Circle</span><span class="token punctuation">;</span>
<span class="token comment">// better</span>
<span class="token keyword">function</span> <span class="token function-definition function">makeCircle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Point</span> <span class="token variable">$point</span><span class="token punctuation">,</span> <span class="token keyword type-hint">float</span> <span class="token variable">$radius</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Circle</span><span class="token punctuation">;</span></code>`,nt,J,ce,at,X,me,lt,h,Vn=`<code class="language-php"><span class="token comment">// monadic</span>
<span class="token keyword">function</span> <span class="token function-definition function">concat</span><span class="token punctuation">(</span><span class="token keyword type-declaration">string</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span>
<span class="token comment">// dyadic</span>
<span class="token keyword">function</span> <span class="token function-definition function">format</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$template</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">string</span> <span class="token operator">...</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">;</span></code>`,pt,Z,ke,ot,E,Hs,ve,Ee,hs,ye,it,P,Wn='<code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">assertExpectedEqualsActual</span><span class="token punctuation">(</span><span class="token variable">$expected</span><span class="token punctuation">,</span> <span class="token variable">$actual</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span><span class="token punctuation">;</span></code>',ut,g,_e,rt,ss,be,ft,ts,es,we,Ps,Ls,He,ct,ns,he,mt,y,Pe,Ts,Le,Te,kt,as,xe,vt,ls,Ce,Et,L,Yn=`<code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'foo'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// vs</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">propertyExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'foo'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,yt,ps,Se,_t,os,Fe,bt,is,Ae,wt,us,Oe,Ht,rs,Re,ht,fs,de,Pt,cs,$e,Lt,ms,Ie,Tt,ks,De,xt,vs,Me;return{c(){c=l("h1"),Rt=r("Small!"),xs=i(),x=l("p"),dt=r(`Width: lt 150 characters
Height: lte 20 lines`),Cs=i(),C=l("p"),$t=r("Sub-blocks should be function calls"),Ss=i(),m=l("ul"),Es=l("li"),It=r("keeps it short"),Dt=i(),ys=l("li"),Mt=r("provides self-documentation"),Fs=i(),S=l("h1"),qt=r("Do One Thing"),As=i(),k=l("p"),jt=r(`A function should go no more than one level of abstraction below the function name.
`),_s=l("em"),Ut=r("Or"),Bt=r(`
If a function name is simply a restatement of it’s implementation, then it is unnecessary.`),Os=i(),F=l("h1"),Nt=r("One Level of Abstraction per Function"),Rs=i(),v=l("ul"),bs=l("li"),Kt=r("high level: getHtml"),Qt=i(),ws=l("li"),Vt=r("low level: concat(”\\n”)"),ds=i(),A=l("h1"),Wt=r("The Stepdown Rule"),$s=i(),O=l("p"),Yt=r("Each level of abstraction should have it’s own function, each invoking only one level below itself."),Is=i(),R=l("h1"),zt=r("Switch Statements"),Ds=i(),d=l("p"),Gt=r("Switch statements are acceptable in abstract factories generating polymorphic objects"),Ms=i(),$=l("h1"),Jt=r("Use Descriptive Names"),qs=i(),I=l("p"),Xt=r("Longer, more descriptive names are desirable"),js=i(),D=l("h1"),Zt=r("Function Arguments"),Us=i(),M=l("p"),gt=r("Fewer is better. Arguments are a different level of abstraction. Testing is combinatorially complex."),Bs=i(),q=l("h1"),se=r("Common Monadic Forms"),Ns=i(),j=l("h2"),te=r("Checks"),Ks=i(),_=l("pre"),Qs=i(),U=l("h2"),ee=r("Transforms"),Vs=i(),b=l("pre"),Ws=i(),B=l("h2"),ne=r("Events"),Ys=i(),w=l("pre"),zs=i(),N=l("h1"),ae=r("Flag Arguments"),Gs=i(),K=l("p"),le=r("Better multiple functions than functions with flags."),Js=i(),Q=l("h1"),pe=r("Dyadic Functions"),Xs=i(),V=l("p"),oe=r("convert to monadic functions by converting to member function or creating a separate class to wrap"),Zs=i(),W=l("h1"),ie=r("Triadic Functions"),gs=i(),Y=l("p"),ue=r("each new argument is combinatorially more complicated"),st=i(),z=l("h1"),re=r("Argument Objects"),tt=i(),G=l("p"),fe=r("reduce number of args by grouping args together into domain objects"),et=i(),H=l("pre"),nt=i(),J=l("h1"),ce=r("Argument Lists"),at=i(),X=l("p"),me=r("functions accepting argument lists technically collapse that list to a single argument, e.g."),lt=i(),h=l("pre"),pt=i(),Z=l("h1"),ke=r("Verbs and Keywords"),ot=i(),E=l("ul"),Hs=l("li"),ve=r("monads: verb/noun pair"),Ee=i(),hs=l("li"),ye=r("dyads, etc. may use keywords to imply argument order, e.g."),it=i(),P=l("pre"),ut=i(),g=l("h1"),_e=r("Have No Side Effects"),rt=i(),ss=l("p"),be=r(`side effects may cause unexpected state changes
temporal couplings`),ft=i(),ts=l("ul"),es=l("li"),we=r("function is only safe to call at certain times"),Ps=l("ul"),Ls=l("li"),He=r("perhaps due to modified state"),ct=i(),ns=l("h1"),he=r("Output Arguments"),mt=i(),y=l("p"),Pe=r("in OO, "),Ts=l("code"),Le=r("this"),Te=r(" is the output argument"),kt=i(),as=l("h1"),xe=r("Command Query Separation"),vt=i(),ls=l("p"),Ce=r("read state, write state, not both"),Et=i(),L=l("pre"),yt=i(),ps=l("h1"),Se=r("Prefer Exceptions to Returning Error Codes"),_t=i(),os=l("p"),Fe=r("exceptions propagate naturally, return codes do not"),bt=i(),is=l("h1"),Ae=r("Extract Try/Catch Blocks"),wt=i(),us=l("p"),Oe=r("try/catch blocks bifercate between normal processing and error processing; simplify the logic as much as possible"),Ht=i(),rs=l("h1"),Re=r("Error Handling Is One Thing"),ht=i(),fs=l("p"),de=r("functions do one thing => error handling is one thing; unique functions for error cases"),Pt=i(),cs=l("h1"),$e=r("Don’t Repeat Yourself"),Lt=i(),ms=l("p"),Ie=r("everything in programming is an attempt to reduce duplication"),Tt=i(),ks=l("h1"),De=r("Structured Programming"),xt=i(),vs=l("p"),Me=r("Dijkstra’s structured programming rules are not relevant in small functions"),this.h()},l(s){c=p(s,"H1",{});var e=o(c);Rt=f(e,"Small!"),e.forEach(t),xs=u(s),x=p(s,"P",{});var Ue=o(x);dt=f(Ue,`Width: lt 150 characters
Height: lte 20 lines`),Ue.forEach(t),Cs=u(s),C=p(s,"P",{});var Be=o(C);$t=f(Be,"Sub-blocks should be function calls"),Be.forEach(t),Ss=u(s),m=p(s,"UL",{});var Ct=o(m);Es=p(Ct,"LI",{});var Ne=o(Es);It=f(Ne,"keeps it short"),Ne.forEach(t),Dt=u(Ct),ys=p(Ct,"LI",{});var Ke=o(ys);Mt=f(Ke,"provides self-documentation"),Ke.forEach(t),Ct.forEach(t),Fs=u(s),S=p(s,"H1",{});var Qe=o(S);qt=f(Qe,"Do One Thing"),Qe.forEach(t),As=u(s),k=p(s,"P",{});var St=o(k);jt=f(St,`A function should go no more than one level of abstraction below the function name.
`),_s=p(St,"EM",{});var Ve=o(_s);Ut=f(Ve,"Or"),Ve.forEach(t),Bt=f(St,`
If a function name is simply a restatement of it’s implementation, then it is unnecessary.`),St.forEach(t),Os=u(s),F=p(s,"H1",{});var We=o(F);Nt=f(We,"One Level of Abstraction per Function"),We.forEach(t),Rs=u(s),v=p(s,"UL",{});var Ft=o(v);bs=p(Ft,"LI",{});var Ye=o(bs);Kt=f(Ye,"high level: getHtml"),Ye.forEach(t),Qt=u(Ft),ws=p(Ft,"LI",{});var ze=o(ws);Vt=f(ze,"low level: concat(”\\n”)"),ze.forEach(t),Ft.forEach(t),ds=u(s),A=p(s,"H1",{});var Ge=o(A);Wt=f(Ge,"The Stepdown Rule"),Ge.forEach(t),$s=u(s),O=p(s,"P",{});var Je=o(O);Yt=f(Je,"Each level of abstraction should have it’s own function, each invoking only one level below itself."),Je.forEach(t),Is=u(s),R=p(s,"H1",{});var Xe=o(R);zt=f(Xe,"Switch Statements"),Xe.forEach(t),Ds=u(s),d=p(s,"P",{});var Ze=o(d);Gt=f(Ze,"Switch statements are acceptable in abstract factories generating polymorphic objects"),Ze.forEach(t),Ms=u(s),$=p(s,"H1",{});var ge=o($);Jt=f(ge,"Use Descriptive Names"),ge.forEach(t),qs=u(s),I=p(s,"P",{});var sn=o(I);Xt=f(sn,"Longer, more descriptive names are desirable"),sn.forEach(t),js=u(s),D=p(s,"H1",{});var tn=o(D);Zt=f(tn,"Function Arguments"),tn.forEach(t),Us=u(s),M=p(s,"P",{});var en=o(M);gt=f(en,"Fewer is better. Arguments are a different level of abstraction. Testing is combinatorially complex."),en.forEach(t),Bs=u(s),q=p(s,"H1",{});var nn=o(q);se=f(nn,"Common Monadic Forms"),nn.forEach(t),Ns=u(s),j=p(s,"H2",{});var an=o(j);te=f(an,"Checks"),an.forEach(t),Ks=u(s),_=p(s,"PRE",{class:!0});var zn=o(_);zn.forEach(t),Qs=u(s),U=p(s,"H2",{});var ln=o(U);ee=f(ln,"Transforms"),ln.forEach(t),Vs=u(s),b=p(s,"PRE",{class:!0});var Gn=o(b);Gn.forEach(t),Ws=u(s),B=p(s,"H2",{});var pn=o(B);ne=f(pn,"Events"),pn.forEach(t),Ys=u(s),w=p(s,"PRE",{class:!0});var Jn=o(w);Jn.forEach(t),zs=u(s),N=p(s,"H1",{});var on=o(N);ae=f(on,"Flag Arguments"),on.forEach(t),Gs=u(s),K=p(s,"P",{});var un=o(K);le=f(un,"Better multiple functions than functions with flags."),un.forEach(t),Js=u(s),Q=p(s,"H1",{});var rn=o(Q);pe=f(rn,"Dyadic Functions"),rn.forEach(t),Xs=u(s),V=p(s,"P",{});var fn=o(V);oe=f(fn,"convert to monadic functions by converting to member function or creating a separate class to wrap"),fn.forEach(t),Zs=u(s),W=p(s,"H1",{});var cn=o(W);ie=f(cn,"Triadic Functions"),cn.forEach(t),gs=u(s),Y=p(s,"P",{});var mn=o(Y);ue=f(mn,"each new argument is combinatorially more complicated"),mn.forEach(t),st=u(s),z=p(s,"H1",{});var kn=o(z);re=f(kn,"Argument Objects"),kn.forEach(t),tt=u(s),G=p(s,"P",{});var vn=o(G);fe=f(vn,"reduce number of args by grouping args together into domain objects"),vn.forEach(t),et=u(s),H=p(s,"PRE",{class:!0});var Xn=o(H);Xn.forEach(t),nt=u(s),J=p(s,"H1",{});var En=o(J);ce=f(En,"Argument Lists"),En.forEach(t),at=u(s),X=p(s,"P",{});var yn=o(X);me=f(yn,"functions accepting argument lists technically collapse that list to a single argument, e.g."),yn.forEach(t),lt=u(s),h=p(s,"PRE",{class:!0});var Zn=o(h);Zn.forEach(t),pt=u(s),Z=p(s,"H1",{});var _n=o(Z);ke=f(_n,"Verbs and Keywords"),_n.forEach(t),ot=u(s),E=p(s,"UL",{});var At=o(E);Hs=p(At,"LI",{});var bn=o(Hs);ve=f(bn,"monads: verb/noun pair"),bn.forEach(t),Ee=u(At),hs=p(At,"LI",{});var wn=o(hs);ye=f(wn,"dyads, etc. may use keywords to imply argument order, e.g."),wn.forEach(t),At.forEach(t),it=u(s),P=p(s,"PRE",{class:!0});var gn=o(P);gn.forEach(t),ut=u(s),g=p(s,"H1",{});var Hn=o(g);_e=f(Hn,"Have No Side Effects"),Hn.forEach(t),rt=u(s),ss=p(s,"P",{});var hn=o(ss);be=f(hn,`side effects may cause unexpected state changes
temporal couplings`),hn.forEach(t),ft=u(s),ts=p(s,"UL",{});var Pn=o(ts);es=p(Pn,"LI",{});var qe=o(es);we=f(qe,"function is only safe to call at certain times"),Ps=p(qe,"UL",{});var Ln=o(Ps);Ls=p(Ln,"LI",{});var Tn=o(Ls);He=f(Tn,"perhaps due to modified state"),Tn.forEach(t),Ln.forEach(t),qe.forEach(t),Pn.forEach(t),ct=u(s),ns=p(s,"H1",{});var xn=o(ns);he=f(xn,"Output Arguments"),xn.forEach(t),mt=u(s),y=p(s,"P",{});var Ot=o(y);Pe=f(Ot,"in OO, "),Ts=p(Ot,"CODE",{});var Cn=o(Ts);Le=f(Cn,"this"),Cn.forEach(t),Te=f(Ot," is the output argument"),Ot.forEach(t),kt=u(s),as=p(s,"H1",{});var Sn=o(as);xe=f(Sn,"Command Query Separation"),Sn.forEach(t),vt=u(s),ls=p(s,"P",{});var Fn=o(ls);Ce=f(Fn,"read state, write state, not both"),Fn.forEach(t),Et=u(s),L=p(s,"PRE",{class:!0});var sa=o(L);sa.forEach(t),yt=u(s),ps=p(s,"H1",{});var An=o(ps);Se=f(An,"Prefer Exceptions to Returning Error Codes"),An.forEach(t),_t=u(s),os=p(s,"P",{});var On=o(os);Fe=f(On,"exceptions propagate naturally, return codes do not"),On.forEach(t),bt=u(s),is=p(s,"H1",{});var Rn=o(is);Ae=f(Rn,"Extract Try/Catch Blocks"),Rn.forEach(t),wt=u(s),us=p(s,"P",{});var dn=o(us);Oe=f(dn,"try/catch blocks bifercate between normal processing and error processing; simplify the logic as much as possible"),dn.forEach(t),Ht=u(s),rs=p(s,"H1",{});var $n=o(rs);Re=f($n,"Error Handling Is One Thing"),$n.forEach(t),ht=u(s),fs=p(s,"P",{});var In=o(fs);de=f(In,"functions do one thing => error handling is one thing; unique functions for error cases"),In.forEach(t),Pt=u(s),cs=p(s,"H1",{});var Dn=o(cs);$e=f(Dn,"Don’t Repeat Yourself"),Dn.forEach(t),Lt=u(s),ms=p(s,"P",{});var Mn=o(ms);Ie=f(Mn,"everything in programming is an attempt to reduce duplication"),Mn.forEach(t),Tt=u(s),ks=p(s,"H1",{});var qn=o(ks);De=f(qn,"Structured Programming"),qn.forEach(t),xt=u(s),vs=p(s,"P",{});var jn=o(vs);Me=f(jn,"Dijkstra’s structured programming rules are not relevant in small functions"),jn.forEach(t),this.h()},h(){T(_,"class","language-php"),T(b,"class","language-ts"),T(w,"class","language-ts"),T(H,"class","language-php"),T(h,"class","language-php"),T(P,"class","language-php"),T(L,"class","language-php")},m(s,e){n(s,c,e),a(c,Rt),n(s,xs,e),n(s,x,e),a(x,dt),n(s,Cs,e),n(s,C,e),a(C,$t),n(s,Ss,e),n(s,m,e),a(m,Es),a(Es,It),a(m,Dt),a(m,ys),a(ys,Mt),n(s,Fs,e),n(s,S,e),a(S,qt),n(s,As,e),n(s,k,e),a(k,jt),a(k,_s),a(_s,Ut),a(k,Bt),n(s,Os,e),n(s,F,e),a(F,Nt),n(s,Rs,e),n(s,v,e),a(v,bs),a(bs,Kt),a(v,Qt),a(v,ws),a(ws,Vt),n(s,ds,e),n(s,A,e),a(A,Wt),n(s,$s,e),n(s,O,e),a(O,Yt),n(s,Is,e),n(s,R,e),a(R,zt),n(s,Ds,e),n(s,d,e),a(d,Gt),n(s,Ms,e),n(s,$,e),a($,Jt),n(s,qs,e),n(s,I,e),a(I,Xt),n(s,js,e),n(s,D,e),a(D,Zt),n(s,Us,e),n(s,M,e),a(M,gt),n(s,Bs,e),n(s,q,e),a(q,se),n(s,Ns,e),n(s,j,e),a(j,te),n(s,Ks,e),n(s,_,e),_.innerHTML=Bn,n(s,Qs,e),n(s,U,e),a(U,ee),n(s,Vs,e),n(s,b,e),b.innerHTML=Nn,n(s,Ws,e),n(s,B,e),a(B,ne),n(s,Ys,e),n(s,w,e),w.innerHTML=Kn,n(s,zs,e),n(s,N,e),a(N,ae),n(s,Gs,e),n(s,K,e),a(K,le),n(s,Js,e),n(s,Q,e),a(Q,pe),n(s,Xs,e),n(s,V,e),a(V,oe),n(s,Zs,e),n(s,W,e),a(W,ie),n(s,gs,e),n(s,Y,e),a(Y,ue),n(s,st,e),n(s,z,e),a(z,re),n(s,tt,e),n(s,G,e),a(G,fe),n(s,et,e),n(s,H,e),H.innerHTML=Qn,n(s,nt,e),n(s,J,e),a(J,ce),n(s,at,e),n(s,X,e),a(X,me),n(s,lt,e),n(s,h,e),h.innerHTML=Vn,n(s,pt,e),n(s,Z,e),a(Z,ke),n(s,ot,e),n(s,E,e),a(E,Hs),a(Hs,ve),a(E,Ee),a(E,hs),a(hs,ye),n(s,it,e),n(s,P,e),P.innerHTML=Wn,n(s,ut,e),n(s,g,e),a(g,_e),n(s,rt,e),n(s,ss,e),a(ss,be),n(s,ft,e),n(s,ts,e),a(ts,es),a(es,we),a(es,Ps),a(Ps,Ls),a(Ls,He),n(s,ct,e),n(s,ns,e),a(ns,he),n(s,mt,e),n(s,y,e),a(y,Pe),a(y,Ts),a(Ts,Le),a(y,Te),n(s,kt,e),n(s,as,e),a(as,xe),n(s,vt,e),n(s,ls,e),a(ls,Ce),n(s,Et,e),n(s,L,e),L.innerHTML=Yn,n(s,yt,e),n(s,ps,e),a(ps,Se),n(s,_t,e),n(s,os,e),a(os,Fe),n(s,bt,e),n(s,is,e),a(is,Ae),n(s,wt,e),n(s,us,e),a(us,Oe),n(s,Ht,e),n(s,rs,e),a(rs,Re),n(s,ht,e),n(s,fs,e),a(fs,de),n(s,Pt,e),n(s,cs,e),a(cs,$e),n(s,Lt,e),n(s,ms,e),a(ms,Ie),n(s,Tt,e),n(s,ks,e),a(ks,De),n(s,xt,e),n(s,vs,e),a(vs,Me)},p:je,i:je,o:je,d(s){s&&t(c),s&&t(xs),s&&t(x),s&&t(Cs),s&&t(C),s&&t(Ss),s&&t(m),s&&t(Fs),s&&t(S),s&&t(As),s&&t(k),s&&t(Os),s&&t(F),s&&t(Rs),s&&t(v),s&&t(ds),s&&t(A),s&&t($s),s&&t(O),s&&t(Is),s&&t(R),s&&t(Ds),s&&t(d),s&&t(Ms),s&&t($),s&&t(qs),s&&t(I),s&&t(js),s&&t(D),s&&t(Us),s&&t(M),s&&t(Bs),s&&t(q),s&&t(Ns),s&&t(j),s&&t(Ks),s&&t(_),s&&t(Qs),s&&t(U),s&&t(Vs),s&&t(b),s&&t(Ws),s&&t(B),s&&t(Ys),s&&t(w),s&&t(zs),s&&t(N),s&&t(Gs),s&&t(K),s&&t(Js),s&&t(Q),s&&t(Xs),s&&t(V),s&&t(Zs),s&&t(W),s&&t(gs),s&&t(Y),s&&t(st),s&&t(z),s&&t(tt),s&&t(G),s&&t(et),s&&t(H),s&&t(nt),s&&t(J),s&&t(at),s&&t(X),s&&t(lt),s&&t(h),s&&t(pt),s&&t(Z),s&&t(ot),s&&t(E),s&&t(it),s&&t(P),s&&t(ut),s&&t(g),s&&t(rt),s&&t(ss),s&&t(ft),s&&t(ts),s&&t(ct),s&&t(ns),s&&t(mt),s&&t(y),s&&t(kt),s&&t(as),s&&t(vt),s&&t(ls),s&&t(Et),s&&t(L),s&&t(yt),s&&t(ps),s&&t(_t),s&&t(os),s&&t(bt),s&&t(is),s&&t(wt),s&&t(us),s&&t(Ht),s&&t(rs),s&&t(ht),s&&t(fs),s&&t(Pt),s&&t(cs),s&&t(Lt),s&&t(ms),s&&t(Tt),s&&t(ks),s&&t(xt),s&&t(vs)}}}const pa={created_at:"2022-11-25 18:32:57 -0500",updated_at:"2022-11-25 18:32:57 -0500",tags:["programming:architecture","author:Robert C. Martin","book:Clean Code"]};class oa extends ta{constructor(c){super(),ea(this,c,null,aa,na,{})}}export{oa as default,pa as metadata};
