import{S as We,i as Ye,s as Be,k as a,q as m,a as n,l as o,m as f,r,h as l,c as p,b as i,E as t,B as Re}from"./index-a01aa152.js";function Oe(Ne){let _,K,A,h,Q,G,u,C,V,X,I,Z,$,H,g,ee,M,le,N,R,te,W,d,se,Y,D,ie,B,L,ae,O,S,oe,U,b,fe,j,x,me,w,v,z,re,ne,T,pe,ue,k,ve,_e,q,Ee,F,P,ce,J,y,he;return{c(){_=a("h1"),K=m("Getting Clean via Emergent Design"),A=n(),h=a("p"),Q=m("simple design…"),G=n(),u=a("ol"),C=a("li"),V=m("runs all tests"),X=n(),I=a("li"),Z=m("contains no duplication"),$=n(),H=a("li"),g=m("expresses intent of the programmer"),ee=n(),M=a("li"),le=m("minimizes number of classes and methods"),N=n(),R=a("h1"),te=m("Simple Design Rule 1: Runs All the Tests"),W=n(),d=a("p"),se=m("The more testable a system is, the better; SRP facilitates this."),Y=n(),D=a("h1"),ie=m("Simple Design Rules 2-4: Refactoring"),B=n(),L=a("p"),ae=m("With tests, you can safely refactor"),O=n(),S=a("h1"),oe=m("No Duplication"),U=n(),b=a("p"),fe=m("DRYing even small sections of code can reveal violations of SRP"),j=n(),x=a("h1"),me=m("Expressive"),w=n(),v=a("ul"),z=a("li"),re=m("good names"),ne=n(),T=a("li"),pe=m("small classes/functions"),ue=n(),k=a("li"),ve=m("standardized nomenclature"),_e=n(),q=a("li"),Ee=m("unit testing"),F=n(),P=a("h1"),ce=m("Minimal Classes and Methods"),J=n(),y=a("p"),he=m("avoid pointless dogmatism")},l(e){_=o(e,"H1",{});var s=f(_);K=r(s,"Getting Clean via Emergent Design"),s.forEach(l),A=p(e),h=o(e,"P",{});var de=f(h);Q=r(de,"simple design…"),de.forEach(l),G=p(e),u=o(e,"OL",{});var E=f(u);C=o(E,"LI",{});var De=f(C);V=r(De,"runs all tests"),De.forEach(l),X=p(E),I=o(E,"LI",{});var Le=f(I);Z=r(Le,"contains no duplication"),Le.forEach(l),$=p(E),H=o(E,"LI",{});var Se=f(H);g=r(Se,"expresses intent of the programmer"),Se.forEach(l),ee=p(E),M=o(E,"LI",{});var be=f(M);le=r(be,"minimizes number of classes and methods"),be.forEach(l),E.forEach(l),N=p(e),R=o(e,"H1",{});var xe=f(R);te=r(xe,"Simple Design Rule 1: Runs All the Tests"),xe.forEach(l),W=p(e),d=o(e,"P",{});var Pe=f(d);se=r(Pe,"The more testable a system is, the better; SRP facilitates this."),Pe.forEach(l),Y=p(e),D=o(e,"H1",{});var ye=f(D);ie=r(ye,"Simple Design Rules 2-4: Refactoring"),ye.forEach(l),B=p(e),L=o(e,"P",{});var Ce=f(L);ae=r(Ce,"With tests, you can safely refactor"),Ce.forEach(l),O=p(e),S=o(e,"H1",{});var Ie=f(S);oe=r(Ie,"No Duplication"),Ie.forEach(l),U=p(e),b=o(e,"P",{});var He=f(b);fe=r(He,"DRYing even small sections of code can reveal violations of SRP"),He.forEach(l),j=p(e),x=o(e,"H1",{});var Me=f(x);me=r(Me,"Expressive"),Me.forEach(l),w=p(e),v=o(e,"UL",{});var c=f(v);z=o(c,"LI",{});var ze=f(z);re=r(ze,"good names"),ze.forEach(l),ne=p(c),T=o(c,"LI",{});var Te=f(T);pe=r(Te,"small classes/functions"),Te.forEach(l),ue=p(c),k=o(c,"LI",{});var ke=f(k);ve=r(ke,"standardized nomenclature"),ke.forEach(l),_e=p(c),q=o(c,"LI",{});var qe=f(q);Ee=r(qe,"unit testing"),qe.forEach(l),c.forEach(l),F=p(e),P=o(e,"H1",{});var Ae=f(P);ce=r(Ae,"Minimal Classes and Methods"),Ae.forEach(l),J=p(e),y=o(e,"P",{});var Ge=f(y);he=r(Ge,"avoid pointless dogmatism"),Ge.forEach(l)},m(e,s){i(e,_,s),t(_,K),i(e,A,s),i(e,h,s),t(h,Q),i(e,G,s),i(e,u,s),t(u,C),t(C,V),t(u,X),t(u,I),t(I,Z),t(u,$),t(u,H),t(H,g),t(u,ee),t(u,M),t(M,le),i(e,N,s),i(e,R,s),t(R,te),i(e,W,s),i(e,d,s),t(d,se),i(e,Y,s),i(e,D,s),t(D,ie),i(e,B,s),i(e,L,s),t(L,ae),i(e,O,s),i(e,S,s),t(S,oe),i(e,U,s),i(e,b,s),t(b,fe),i(e,j,s),i(e,x,s),t(x,me),i(e,w,s),i(e,v,s),t(v,z),t(z,re),t(v,ne),t(v,T),t(T,pe),t(v,ue),t(v,k),t(k,ve),t(v,_e),t(v,q),t(q,Ee),i(e,F,s),i(e,P,s),t(P,ce),i(e,J,s),i(e,y,s),t(y,he)},p:Re,i:Re,o:Re,d(e){e&&l(_),e&&l(A),e&&l(h),e&&l(G),e&&l(u),e&&l(N),e&&l(R),e&&l(W),e&&l(d),e&&l(Y),e&&l(D),e&&l(B),e&&l(L),e&&l(O),e&&l(S),e&&l(U),e&&l(b),e&&l(j),e&&l(x),e&&l(w),e&&l(v),e&&l(F),e&&l(P),e&&l(J),e&&l(y)}}}const je={created_at:"2022-12-11 22:32:27 -0500",updated_at:"2022-12-11 22:32:27 -0500",tags:["programming:architecture","author:Robert C. Martin","book:Clean Code"]};class we extends We{constructor(_){super(),Ye(this,_,null,Oe,Be,{})}}export{we as default,je as metadata};
